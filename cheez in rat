#include <bits/stdc++.h>
using namespace std;
#define FOR(i, a, b) for (ll i = (a); i < (b); i++)
typedef long long int ll;
#define MOD (1000000000 + 7)
#define INF (1000000000 + 7)
#define all(x) (x).begin(), (x).end()
#define lb lower_bound
#define ub upper_bound
#define bs binary_search
#define mp make_pair
#define f first
#define s second
#define pb push_back
#define pob pop_back

ll mod_add(ll a, ll b, ll m)
{
    a = a % m;
    b = b % m;
    return (((a + b) % m) + m) % m;
}
ll mod_mul(ll a, ll b, ll m)
{
    a = a % m;
    b = b % m;
    return (((a * b) % m) + m) % m;
}
ll mod_sub(ll a, ll b, ll m)
{
    a = a % m;
    b = b % m;
    return (((a - b) % m) + m) % m;
}

// Returns factorial of n
ll gcd(int a, int b)
{
    if (b == 0)
    {
        return (a);
    }
    return (gcd(b, a % b));
}

int findPow(int i, int p, int m)
{
    if (p == 0)
    {
        return (1);
    }
    int res = findPow(i, p / 2, m);
    if (p % 2 == 0)
    {
        return ((res * res) % m);
    }
    else
    {
        return ((((res * res) % m) * i) % m);
    }
}
ll fact(ll n);

ll nCr(ll n, ll r)
{
    return fact(n) / (fact(r) * fact(n - r));
}

ll fact(ll n)
{
    ll res = 1;
    for (ll i = 2; i <= n; i++)
        res = res * i;
    return res;
}
int modInverse(int val, int m)
{
    return (findPow(val, m - 2, m));
}

bool cmp(pair<int, int> &a,
         pair<int, int> &b)
{
    return a.second < b.second;
}

ll sumDigits(ll n)
{
    ll sum = 0;
    while (n > 0)
    {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

bool isPalindrome(string str)
{
    int low = 0;
    int high = str.length() - 1;

    while (low < high)
    {
        // if a mismatch happens
        if (str[low] != str[high])
        {
            return false;
        }
        low++;
        high--;
    }
    return true;
}
int d[500005];
int find(int a)
{
    if (a == d[a])
        return a;
    else
        return d[a] = find(d[a]);
}
void add(int a, int b)
{
    int x = find(a);
    int y = find(b);
    if (x != y)
    {
        d[x] = y;
    }
}
int dp[11][11];
ll n, m;
ll arr[11][11];
char b[11][11];
bool solve(int i, int j)
{
    if (i == n - 1 && j == m - 1 && b[i][j] == 'o')
    {
        arr[i][j] = 1;
        return true;
    }

    if (i < 0 || j < 0 || j > m - 1 || i > n - 1 || dp[i][j] != -1)
    {
        return false;
    }

    if (b[i][j] == 'o' && dp[i][j] == -1)
    {
        dp[i][j] = 1;
        bool y = solve(i + 1, j) || solve(i, j + 1) || solve(i - 1, j) || solve(i, j - 1);
        if (y == true)
        {
            arr[i][j] = 1;
        }
        return y;
    }
    return false;
}

int main()
{

    cin >> n >> m;
    FOR(i, 0, n)
    {
        FOR(j, 0, m)
        {
            cin >> b[i][j];
        }
    }
    memset(dp, -1, sizeof(dp));
    memset(arr, 0, sizeof(arr));
    bool x = solve(0, 0);
    FOR(i, 0, n)
    {
        FOR(j, 0, m)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
}
